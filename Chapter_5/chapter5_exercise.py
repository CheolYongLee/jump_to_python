# chapter5_exercise.py

# 문제 1
print("Q1. UpgradCalcurator를 만들고 값을 밸 수 있는 ㄴminus 메서드를 추가해보자")
print("""------------------------------------------------------------
class Calculator:
    def __init__(self):
        self.value = 0

    def add(self, val):
        self.value += val
------------------------------------------------------------""")
print("A1.")

class Calculator:
    def __init__(self):
        self.value = 0

    def add(self, val):
        self.value += val

        
class UpgradeCalculator(Calculator):
    def minus(self, val):
        self.value -= val

cal = UpgradeCalculator()
cal.add(10)
cal.minus(7)

print(cal.value)

print()
# ----------------------------------------------------------
# 문제 2
print("Q2. 객체변수 value가 100 이상의 값은 가질 수 없도록 제한하는 MaxLimitCalculator 클래스를 만들어보자. 단, Calculator클래스를 상속받을 것")
print("""------------------------------------------------------------
class Calculator:
    def __init__(self):
        self.value = 0

    def add(self, val):
        self.value += val
------------------------------------------------------------""")
print("A2.")

class MaxLimitCalculator(Calculator):
    def add(self, val):
        self.value += val
        if self.value >= 100:
            self.value = 100

cal = MaxLimitCalculator()
cal.add(50)
cal.add(60)

print(cal.value)


print()
# ----------------------------------------------------------
# 문제 3
print("Q3. 다음 결과를 예측해 보자")
print("""------------------------------------------------------------
1)
all([1, 2, abs(-3)-3])
------------------------------------------------------------""")
print("""------------------------------------------------------------
2)
chr(ord('a')) == 'a'
------------------------------------------------------------""")
print("A3.")
print("""------------------------------------------------------------
1)
False
abs() 함수는 입력받은 숫자를 절댓값으로 돌려주기 때문에 3-3 = 0이 되므로 Flase가 된다.
------------------------------------------------------------""")
print("""------------------------------------------------------------
2)
True
'a'를 ord()가 의해 아스키 코드로 변환한 뒤 chr()에 의하여 다시 문자 'a'로 변환된다..
------------------------------------------------------------""")
print([1, 2, abs(-3)-3])
print(chr(ord('a')))


print()
# ----------------------------------------------------------
# 문제 4
print("Q4. filter와 lambda를 사용하여 음수를 모두 제거해보자.")
print("A4.")
print(list(filter(lambda a: a>0, [1, -2, 3, -5, 8, -3])))
# filter()에 함수, 반복 가능한 자료형을 입력 해주어야한다.


print()
# ----------------------------------------------------------
# 문제 5
print("Q5. 234라는 16진수는 다음과 같이 구할 수 있다. 반대로 16진수 문자열 0xea를 10진수로 변경해보자")
print("""------------------------------------------------------------
hex(234)
------------------------------------------------------------""")
print("A5.")
print(int(0xea))
# 16진수에서 10진수로 변환 할 때에는 int()를 사용한다.


print()
# ----------------------------------------------------------
# 문제 6
print("Q6. map과 lambdafmf 사용하여 [1, 2, 3, 4] 리스트의 각 요솟값에 3이 곱해진 리스트를 만들어 보자.")
print("A6.")
print(list(map(lambda a: a*3, [1, 2, 3, 4])))


print()
# ----------------------------------------------------------
# 문제 7
print("Q7. 다음 리스트의 최댓값과 최솟값을 구해보자")
print("""------------------------------------------------------------
[-8, 2, 7, 5, -3, 5, 0, 1]
------------------------------------------------------------""")
print("A7.")
a = [-8, 2, 7, 5, -3, 5, 0, 1]
print("최댓값: ", max(a))
print("최솟값: ", min(a))
print(max(a) + min(a))


print()
# ----------------------------------------------------------
# 문제 8
print("Q8. 17/3의 결과는 다음과 값다. 소숫점 4자리 까지만 반올림하여 표시해보자.")
print("""------------------------------------------------------------
17/3
5.666666666666667
------------------------------------------------------------""")
print("A8.")
print(round(17/3, 4))


print()
# ----------------------------------------------------------
# 문제 9
print("Q9. 다음과 같이 실행할 때 입력값을 모두 더하여 출력하는 스크립트(C:/doit/mtargv.py)를 작성해보자")
print("""------------------------------------------------------------
C:/>cd doit
C:/doit>python myargv.py 1 2 3 4 5 6 7 8 9 10
------------------------------------------------------------""")
print("A9.")

import sys

result = 0
numbers = sys.argv[1:] # 파일 이름을 제외한 명령 행의 모든 입력

for i in numbers:
    result += int(i)
print(result)


print()
# ----------------------------------------------------------
# 문제 10
print("Q10. os 모듈을 사용하여 다음과 같이 동작하도록 코드를 작성해보자")
print("""------------------------------------------------------------
1) C:/doit 디렉토리로 이동한다.
2) dir 명령을 실행하고 그 결과를 변수에 담는다.
3) dir 결과를 출력한다.
------------------------------------------------------------""")
print("A10.")
print("""1) os.chdir("C:/doit")
2) dir = os.dir
3) print(dir)
""")
import os
os.chdir("C:/doit")
os.system("dir") # 현재 디렉토리에서 시스템 명령어 dir을 실행.
a = os.popen("dir") # 시스템 명령어를 실행한 결과값을 읽기 모드 형태의 객체로 돌려준다.
print(a.read()) # 읽어 들인 객체의 내용을 보기 위한 실행.


print()
# ----------------------------------------------------------
# 문제 11
print("Q11. glob 모듈을 사용하여 C:/doit 디렉토리의 파일 중 확장자가 .py인 파일만 출력하는 프로그램을 작성해보자.")
print("A11.")

import glob
print(glob.glob("C:/Users/ypopp/OneDrive/바탕 화면/Git_Hub/jump_to_python/Chapter_5/*.py"))
# python에서 경로에 \을 사용하는것 주의 /로 사용할 것.


print()
# ----------------------------------------------------------
# 문제 12
print("Q12. time 모듈을 사용하여 현재 날짜와 시간을 다음과 같은 형식으로 출력해 보자")
print("""------------------------------------------------------------
2018/04/03 17:20:32
------------------------------------------------------------""")
print("A12.")
import time
print(time.strftime("%Y/%m/%d %X"))


print()
# ----------------------------------------------------------
# 문제 13
print("Q13. random 모듈을 사용하여 로또 번호 (1~45 사이의 숫자 6개)를 생성해보자. 단 중복된 숫자가 있으면 안됨")
print("A13.")

import random

numbers = []
number = 0

def lotto():
    while len(numbers) != 6:
        number = random.randint(1, 45)
        if number in numbers:
            continue
        else:
            numbers.append(number)
    print(numbers)
    

lotto()
