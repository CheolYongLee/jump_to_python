정규 표현식	/	설명
=============================================================================================================
\d			숫자와 매치, [0-9]와 동일한 표현식
\D			숫자가 아닌 것과 매치, [^0-9]와 동일한 표현식
\s			whitespace 문자(space나 tab처럼 공백을 표현하는 문자)와 매치, [ \t\n\r\f\v]와 동일한 표현식. 맨 앞의 빈칸은 공백문자(space)를 의미한다.
\S			whitespace 문자가 아닌 것과 매치, [a-zA-Z0-9]와 동일한 표현식
\w			문자+숫자(alphanumeric)와 매치, [a=zA=Z0-9]와 동일한 표현식
\W			문자+숫자(alphanumeric)가 아닌 문자와 매치, [^a=zA=Z0-9]와 동일한 표현식

*대문자는 소문자의 반대 의미

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Dot[.]			줄바꿈 문자인 \n을 제외한 모든 문자와 매치, "a + 모든 문자 +b" <=매치X=> [abc]는 a와 b사이에 문자가 아무것도 없으므로 매치X

반복(*)			* 문자 앞에 있는 문자가 0번이상 반복되면 매치 [ca*t] <=매치=>  [ct] [cat] [caat] [caaat]
반복(+)			+ 문자 앞에 있는 문자가 1번이상 반복되면 매치
반복(?)			{0, 1}을 의미. ?앞의 문자가 있거나 없거나 둘 다 매치 (존재유무 관계 없이 매치)

반복({m, n})		{m부터 n까지(m~n)}번 반복되면 매치

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
정규식을 사용한 문자열 검색

메서드		/	목적
=============================================================================================================
match()			문자열의 처음부터 정규식과 매치되는지 조사한다.
search()			문자열 전체를 검색하여 정규식과 매치되는지 조사한다.
findall()			정규식과 매치되는모든 문자열(substring)을 리스트로 돌려준다.
finditer()			정규식과 매치되는 모든 문자열(substring)을 반복 가능한 객체롤 돌려준다.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
정규식을 사용한 문자열 검색

메서드		/	목적
=============================================================================================================
match()			문자열의 "처음부터" 정규식과 매치되는지 조사한다.
search()			"문자열 전체"를 검색하여 정규식과 매치되는지 조사한다.
findall()			정규식과 매치되는 모든 문자열(substring)을 "리스트"로 돌려준다.
finditer()			정규식과 매치되는 모든 문자열(substring)을 "반복 가능한 객체"로 돌려준다.


match 객체 (match와 search의 수행 결과)의 메서드

메서드		/	목적
=============================================================================================================
group()			"매치된 문자열"을 돌려준다.
start()			매치된 문자열의 "시작 위치"를 돌려준다.
end()			매치된 문자열의 "끝 위치"를 돌려준다.
span()			매치된 문자열의 (시작, 끝)에 해당하는 튜플을 돌려준다.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
컴파일 옵션

옵션 이름		/	약어	/	설명
=============================================================================================================
DOALL			S		dot 문자(.)가 줄바꿈 문자를 포함하여 모든 문자와 매치한다.
IGNORECASE		I		대소문자 관계없이 매치한다.
MULTILINE		M		여러 줄과 매치한다. (^, $ 메타 문자의 사용과 관계가 있는 옵션이다.)
VERBOSE			X		verbose 모드를 사용한다. (정규식을 보기 편하게 만들 수도 있고 주석 등을 사용할 수도 있다.)

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
메타문자

메타문자		/	의미
=============================================================================================================
|			or 와 같은 의미로 사용
^			문자열의 맨 처음과 매치됨을 의미, 여러줄의 문자열일 때 각 줄의 처음과 매치된다.
$			문자열의 맨 끝과 매치됨을 의미, 여러줄의 문자열일 때 각 줄의 마지막과 매치된다.
\A			문자열의 맨 처음과 매치됨을 의미, re.MULTILINE 옵션을 사용해도 줄과 상관없이 전체 문자열의 처음과 매치된다.
\Z			문자열의 맨 끝과 매치됨을 의미, re.MULTILINE 옵션을 사용해도 줄과 상관없이 전체 문자열의 끝과 매치된다.
\b (r'\b문자열\b')		단어 구분자, whitespace로 구분된 단어일 경우 매치됨, 파이썬 리터럴 규칙에 의하면 백스페이스를 의미하므로 단어 구분자임을 알려주기위해 Raw string임을 알려주는 기호 r을 반드시 붙여줘야 한다.
\B (r'\B문자열\B')		whitespace로 구분된 단어가 아닐경우 매치됨
( ) (group(n))		그루핑, 매치된 문자열 중에서 특정 부분의 문자열만 뽑아내기 위해 사용 (n번째 그룹에 해당하는 문자열) (재참조 메타문자는 \n)

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
전방 탐색

정규식	/	종류			/	설명
=============================================================================================================
(?=...)		긍정형 전방 탐색			...에 해당하는 정규식과 매치되어야 하며 조건이 통과되어도 문자열이 소비되지 않는다.
(?!...)		부정형 전방 탐색			...에 해당하는 정규식과 매치되지 않아야 하며 조건이 통과되어도 문자열이 소비되지 않는다.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
문자열 바꾸기

sub(('함수이름',) '바꿀 문자열 A', '대상 문자열 B', count=n) == B를 A로 바꾸는 방법, n번 반복
subn(('함수이름',) '바꿀 문자열 A', '대상 문자열 B') == B를 A로 바꾸는 방법(튜플 형태로 결괏값 반환) 결과: ('변경된 문자열', 바꾸기가 발생한 횟수)

\g<그룹이름 or 참조 번호(인덱스)> 을 사용하여 정규식의 그룹 이름(참조번호, 인덱스)을 참조할 수 있다.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Greedy vs Non-Greedy

<.*>
* 메타문자는 최대한의 문자열을소비한다.
<.*?>
non-greedy 문자인 ?를 사용하면 가능한 한 가장 최소한의 반복을 수행한다.